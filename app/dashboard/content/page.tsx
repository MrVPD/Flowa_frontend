'use client';

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import DashboardLayout from '../../components/layouts/DashboardLayout';
import { isAuthenticated } from '../../lib/utils/auth';
import ContentGenerationForm from './ContentGenerationForm';
import ContentList from './ContentList';

interface Brand {
  _id: string;
  name: string;
}

interface Theme {
  _id: string;
  name: string;
  category: string;
}

interface GeneratedContent {
  id: string;
  content: string;
  platform: string;
  themeName: string;
}

export default function ContentPage() {
  const router = useRouter();
  const [brands, setBrands] = useState<Brand[]>([]);
  const [themes, setThemes] = useState<Theme[]>([]);
  const [generatedContent, setGeneratedContent] = useState<GeneratedContent[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isGenerating, setIsGenerating] = useState(false);

  useEffect(() => {
    if (!isAuthenticated()) {
      router.push('/auth/login');
      return;
    }

    const fetchData = async () => {
      try {
        setIsLoading(true);
        
        // In a real application, we would fetch data from the API
        // For now, let's use mock data
        
        // Mock brands
        const mockBrands = [
          { _id: '1', name: 'Brand 1' },
          { _id: '2', name: 'Brand 2' },
          { _id: '3', name: 'Brand 3' },
        ];
        setBrands(mockBrands);
        
        // Mock themes
        const mockThemes = [
          { _id: '1', name: 'Summer Collection', category: 'Fashion' },
          { _id: '2', name: 'New Products', category: 'Products' },
          { _id: '3', name: 'Holiday Deals', category: 'Promotions' },
        ];
        setThemes(mockThemes);
        
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [router]);

  const handleBrandChange = async (brandId: string) => {
    try {
      setIsLoading(true);
      
      // In a real application, we would fetch themes based on the selected brand
      // For now, let's use mock data
      
      const mockThemes = [
        { _id: '4', name: 'Brand Specific Theme 1', category: 'Brand Specific' },
        { _id: '5', name: 'Brand Specific Theme 2', category: 'Brand Specific' },
      ];
      setThemes(mockThemes);
      
    } catch (error) {
      console.error('Error fetching themes:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateContent = async (formData: any) => {
    try {
      setIsGenerating(true);
      
      // In a real application, we would call the API to generate content
      // For now, let's use mock data
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const mockGeneratedContent = [
        {
          id: '1',
          content: `üì£ [N·ªôi dung m·∫´u cho ${formData.platform} v·ªÅ ch·ªß ƒë·ªÅ "${themes.find(t => t._id === formData.themeId)?.name}"]

B·∫°n ƒë√£ bao gi·ªù t·ª± h·ªèi l√†m th·∫ø n√†o ƒë·ªÉ t·ªëi ∆∞u h√≥a chi·∫øn l∆∞·ª£c ti·∫øp th·ªã c·ªßa m√¨nh? H√¥m nay ch√∫ng t√¥i s·∫Ω chia s·∫ª v·ªõi b·∫°n nh·ªØng b√≠ quy·∫øt h√†ng ƒë·∫ßu.

Chi·∫øn l∆∞·ª£c ti·∫øp th·ªã hi·ªáu qu·∫£ b·∫Øt ƒë·∫ßu t·ª´ vi·ªác hi·ªÉu r√µ kh√°ch h√†ng c·ªßa b·∫°n. H√£y d√†nh th·ªùi gian nghi√™n c·ª©u v√† ph√¢n t√≠ch ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u c·ªßa b·∫°n ƒë·ªÉ t·∫°o ra n·ªôi dung ph√π h·ª£p nh·∫•t.

ƒê·ª´ng qu√™n chia s·∫ª b√†i vi·∫øt n√†y n·∫øu b·∫°n th·∫•y n√≥ h·ªØu √≠ch v√† ƒë·ªÉ l·∫°i b√¨nh lu·∫≠n v·ªÅ tr·∫£i nghi·ªám c·ªßa b·∫°n!

#MarketingTips #ChiaS·∫ªKi·∫ønTh·ª©c`,
          platform: formData.platform,
          themeName: themes.find(t => t._id === formData.themeId)?.name || '',
        },
        {
          id: '2',
          content: `‚ú® [Ti√™u ƒë·ªÅ h·∫•p d·∫´n kh√°c v·ªÅ ch·ªß ƒë·ªÅ "${themes.find(t => t._id === formData.themeId)?.name}"]

Trong th·∫ø gi·ªõi kinh doanh c·∫°nh tranh ng√†y nay, vi·ªác n·ªïi b·∫≠t l√† ƒëi·ªÅu c·∫ßn thi·∫øt. H√£y xem c√°ch ch√∫ng t√¥i c√≥ th·ªÉ gi√∫p th∆∞∆°ng hi·ªáu c·ªßa b·∫°n t·ªèa s√°ng.

B·∫°n ƒë√£ c√≥ tr·∫£i nghi·ªám n√†o t∆∞∆°ng t·ª± ch∆∞a? Chia s·∫ª v·ªõi ch√∫ng t√¥i trong ph·∫ßn b√¨nh lu·∫≠n nh√©!

.
.
.

#BusinessStrategy #BrandGrowth #MarketingSuccess`,
          platform: formData.platform,
          themeName: themes.find(t => t._id === formData.themeId)?.name || '',
        },
      ];
      
      setGeneratedContent(mockGeneratedContent);
      
    } catch (error) {
      console.error('Error generating content:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleOptimizeContent = async (contentId: string, platform: string) => {
    try {
      setIsLoading(true);
      
      // In a real application, we would call the API to optimize content
      // For now, let's use mock data
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const optimizedContent = {
        id: Date.now().toString(),
        content: `[N·ªôi dung ƒë√£ t·ªëi ∆∞u cho ${platform}]

üì± C√°ch t·ªëi ∆∞u n·ªôi dung c·ªßa b·∫°n tr√™n ${platform} ƒë·ªÉ ƒë·∫°t hi·ªáu qu·∫£ cao nh·∫•t!

‚úÖ S·ª≠ d·ª•ng h√¨nh ·∫£nh ch·∫•t l∆∞·ª£ng cao
‚úÖ Vi·∫øt caption ng·∫Øn g·ªçn, s√∫c t√≠ch
‚úÖ S·ª≠ d·ª•ng hashtag ph√π h·ª£p
‚úÖ T∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi theo d√µi

H√£y th·ª≠ √°p d·ª•ng nh·ªØng m·∫πo n√†y v√† xem k·∫øt qu·∫£ nh√©!

#${platform}Tips #ContentStrategy #DigitalMarketing`,
        platform: platform,
        themeName: 'N·ªôi dung t·ªëi ∆∞u',
      };
      
      setGeneratedContent(prev => [...prev, optimizedContent]);
      
    } catch (error) {
      console.error('Error optimizing content:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <DashboardLayout>
      <div className="pb-5 border-b border-gray-200">
        <h1 className="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl">T·∫°o n·ªôi dung</h1>
        <p className="mt-1 text-sm text-gray-500">
          T·∫°o n·ªôi dung t·ª± ƒë·ªông cho c√°c n·ªÅn t·∫£ng m·∫°ng x√£ h·ªôi
        </p>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
        </div>
      ) : (
        <div className="mt-6 grid grid-cols-1 gap-6 lg:grid-cols-3">
          <div className="lg:col-span-1">
            <ContentGenerationForm 
              brands={brands}
              themes={themes}
              onBrandChange={handleBrandChange}
              onSubmit={handleGenerateContent}
              isGenerating={isGenerating}
            />
          </div>
          <div className="lg:col-span-2">
            <ContentList 
              contents={generatedContent}
              onOptimizeAction={handleOptimizeContent}
            />
          </div>
        </div>
      )}
    </DashboardLayout>
  );
}
